plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.maciejgogulski'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jar.enabled = false
bootJar.enabled = true

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.1'

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.postgresql:postgresql:42.3.8'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'

    implementation 'org.flywaydb:flyway-core'
    testImplementation group: 'org.flywaydb.flyway-test-extensions', name: 'flyway-spring-test', version: '9.5.0'

    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5';
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5';
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5';

}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    systemProperties = [
            'spring.profiles.active': 'test'
    ]
}

task copyJarsForDockerImage(type: Copy, dependsOn: build) {
    from bootJar
    into project.file("${project.buildDir}/docker")
    rename '(.*).jar', 'app.jar'
}
